# .github/workflows/cppcheck.yml

# Name of the workflow
name: Cppcheck Static Analysis

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ main ]
  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "cppcheck"
  cppcheck:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install cppcheck using the package manager
      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck

      # Run cppcheck
      # Customize the command based on your project structure and needs
      - name: Run cppcheck analysis
        run: |
          cppcheck \
            --enable=all \
            --inconclusive \
            --std=c99 \
            --suppress=missingIncludeSystem \
            --verbose \
            --xml --xml-version=2 \
            $(find Lab1 -name '*.ino') 
          else
            echo "Directory Lab1 does not exist!"
            exit 1
          fi
# Analyze all files in the Lab1 directory

      # Upload cppcheck report as artifact
      - name: Upload cppcheck report
        uses: actions/upload-artifact@v4
        with:
          name: cppcheck-report
          path: cppcheck-report.txt

          # Optional: Add specific checks or suppressions
          # --check-level=exhaustive
          # --suppressions-list=suppressions.txt
          # --platform=unix64 # Or specify your target platform (e.g., avr8)
          # You might want to specify source directories or files explicitly within Lab1:
          # Lab1/src Lab1/include
          # Or use find to target specific file types within Lab1:
          # $(find Lab1 -name '*.c' -o -name '*.h')
