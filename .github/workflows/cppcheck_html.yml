# .github/workflows/cppcheck.yml

# Naziv workflowa
name: Cppcheck Analysis and Deploy Report

# Kada se workflow pokreće
on:
  push:
    branches: [ main ] # Pokreni samo na push na main granu za deploy
  pull_request:
    branches: [ main ] # Pokreni samo analizu na PR prema main
  workflow_dispatch: # Omogućuje ručno pokretanje

# Dozvole potrebne za deploy na GitHub Pages
permissions:
  contents: read # Potrebno za checkout
  pages: write # Potrebno za deploy na Pages
  id-token: write # Potrebno za deploy na Pages

jobs:
  # 1. Posao (job) za statičku analizu i generiranje HTML reporta
  cppcheck:
    # Pokreće se na Ubuntu runneru
    runs-on: ubuntu-latest
    
    # Koraci (steps) koji se izvršavaju
    steps:
      # 1.1. Preuzimanje koda repozitorija
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1.2. Instalacija potrebnih alata (cppcheck, git, python3)
      - name: Install Tools
        run: sudo apt-get update && sudo apt-get install -y cppcheck git python3

      # 1.3. Kloniranje cppcheck repozitorija radi pristupa htmlreport skripti
      - name: Clone cppcheck for htmlreport tool
        run: git clone --depth 1 https://github.com/danmar/cppcheck.git /tmp/cppcheck

      # 1.3.1. [DEBUG] Provjera lokacije htmlreport skripte (ostavljamo za svaki slučaj)
      - name: Find htmlreport tool in cloned repo
        run: |
          echo "Listing contents of /tmp/cppcheck:"
          ls -lR /tmp/cppcheck
          echo "Searching for htmlreport script:"
          find /tmp/cppcheck -name '*htmlreport*.py' || echo "Script not found by find."

      # 1.4. Pokretanje cppcheck analize i generiranje XML izvještaja
      - name: Run cppcheck analysis (XML Output)
        id: cppcheck_analysis # Dajemo ID koraku radi provjere ishoda
        # Nastavi čak i ako cppcheck pronađe greške, kako bismo mogli generirati report
        continue-on-error: true 
        run: |
          # Provjeri postoji li Lab1 direktorij
          if [ -d "Lab1" ]; then
            echo "Running cppcheck..."
            INO_FILES=$(find Lab1 -maxdepth 1 -name '*.ino')             
            if [ -z "$INO_FILES" ]; then
              echo "No .ino files found in Lab1 directory!"
              exit 1 # Padni ako nema .ino fileova
            fi
            echo "Analyzing files: $INO_FILES"
            
            # Pokreni cppcheck s XML izlazom (bez --error-exitcode ovdje, provjerit ćemo kasnije)
            cppcheck --enable=all --inconclusive --std=c99 --suppress=missingIncludeSystem --checkers-report=filename.htm --xml --xml-version=2 $INO_FILES 2> cppcheck-report.xml
            
            # Zabilježi izlazni kod cppchecka
            CPPCHECK_EXIT_CODE=$? 
            echo "Cppcheck exit code: $CPPCHECK_EXIT_CODE"
            # Spremi izlazni kod za kasnije korištenje u workflowu
            echo "exit_code=$CPPCHECK_EXIT_CODE" >> $GITHUB_OUTPUT 

            # Ispiši XML report u log radi debuga
            if [ -f cppcheck-report.xml ]; then
               echo "--- Cppcheck XML Report ---"
               cat cppcheck-report.xml
               echo "--- End Report ---"
            else
               echo "cppcheck-report.xml not generated."
               # Kreiraj prazan report da idući korak ne padne potpuno
               echo '<?xml version="1.0" encoding="UTF-8"?><results version="2"><cppcheck version="?"/><errors/></results>' > cppcheck-report.xml
               # Ako cppcheck nije uspio generirati report, vjerojatno želimo da workflow padne
               if [ $CPPCHECK_EXIT_CODE -eq 0 ]; then exit 1; else exit $CPPCHECK_EXIT_CODE; fi
            fi
          else
            echo "Directory Lab1 does not exist!"
            exit 1 # Završi s greškom ako direktorij ne postoji
          fi

      # 1.5. Generiranje HTML izvještaja iz XML-a pomoću klonirane skripte (traženje *.py unutar htmlreport dir + provjera)
      - name: Generate HTML report
        run: |
          echo "Generating HTML report..."
          # Dinamički pronađi putanju do BILO KOJE .py skripte unutar /tmp/cppcheck/htmlreport/ direktorija
          HTML_REPORT_SCRIPT=$(find /tmp/cppcheck/htmlreport -name '*.py' | head -n 1)
          
          # Provjeri je li skripta pronađena
          if [ -z "$HTML_REPORT_SCRIPT" ]; then
             echo "ERROR: No Python script (*.py) found within /tmp/cppcheck/htmlreport/ directory!"
             mkdir -p cppcheck-html-report
             echo "HTML report generation failed." > cppcheck-html-report/index.html
             exit 1 # Padni ako skripta nije nađena
          fi

          echo "Found script candidate at: $HTML_REPORT_SCRIPT"
          ls -l $HTML_REPORT_SCRIPT # Ispiši detalje pronađene skripte

          # DODATNA PROVJERA: Osiguraj da pronađena skripta nije __init__.py
          if [[ "$(basename "$HTML_REPORT_SCRIPT")" == "__init__.py" ]]; then
             echo "ERROR: Found '__init__.py', which is not the correct report script!"
             mkdir -p cppcheck-html-report
             echo "HTML report generation failed because the wrong script was found." > cppcheck-html-report/index.html
             # exit 1  Padni jer smo našli pogrešnu skriptu
          fi

          # Kreiraj izlazni direktorij prije pokretanja skripte
          mkdir -p cppcheck-html-report

          # Provjeri postoji li XML datoteka prije generiranja HTML-a
          if [ -f cppcheck-report.xml ]; then
             echo "Running python script to generate HTML..."
             python3 $HTML_REPORT_SCRIPT --file=cppcheck-report.xml --report-dir=cppcheck-html-report --source-dir=.
             echo "Python script finished."
             # [DEBUG] Ispiši sadržaj generiranog direktorija
             echo "Listing contents of cppcheck-html-report directory:"
             ls -lR cppcheck-html-report
          else
             echo "ERROR: cppcheck-report.xml not found, cannot generate HTML report!"
             echo "HTML report generation failed because XML input was missing." > cppcheck-html-report/index.html
             exit 1 # Padni ako nema XML-a
          fi

      # 1.6. Setup Pages (Konfiguracija za GitHub Pages)
      - name: Setup Pages
        # Pokreni samo ako je push na main granu
        if: github.ref == 'refs/heads/main' 
        uses: actions/configure-pages@v5

      # 1.7. Upload HTML izvještaja kao Pages artefakta
      - name: Upload artifact for Pages
        # Pokreni samo ako je push na main granu
        if: github.ref == 'refs/heads/main' 
        uses: actions/upload-pages-artifact@v3
        with:
          # Uploadaj sadržaj direktorija s HTML izvještajem
          path: './cppcheck-html-report'
          
      # 1.8. Provjera rezultata Cppchecka i označavanje workflowa kao neuspješnog ako treba
      - name: Check Cppcheck Result
        if: steps.cppcheck_analysis.outputs.exit_code != '0'
        run: |
          echo "Cppcheck found errors (exit code ${{ steps.cppcheck_analysis.outputs.exit_code }}). Failing the workflow."
          exit 1

  # 2. Posao (job) za Deploy na GitHub Pages
  deploy:
    # Pokreni ovaj posao samo ako je 'cppcheck' posao uspješno završen (ili ako želite deployati i s greškama?)
    # Ovdje pretpostavljamo da deployamo samo ako NEMA cppcheck grešaka.
    # Ako želite deployati uvijek (na main), maknite needs i if uvjet ili ga prilagodite.
    needs: cppcheck 
    if: github.ref == 'refs/heads/main' && needs.cppcheck.result == 'success' 

    # Postavke okoline za GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    # Dozvole potrebne za deploy
    permissions:
      pages: write
      id-token: write

    # Pokreće se na Ubuntu runneru
    runs-on: ubuntu-latest
    
    steps:
      # Korak za deploy Pages artefakta
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # Koristi službenu akciju za deploy
