# .github/workflows/cppcheck.yml

# Naziv workflowa
name: Cppcheck Analysis and Deploy Report

# Kada se workflow pokreće
on:
  push:
    branches: [ main ] # Pokreni samo na push na main granu za deploy
  pull_request:
    branches: [ main ] # Pokreni samo analizu na PR prema main
  workflow_dispatch: # Omogućuje ručno pokretanje

# Dozvole potrebne za deploy na GitHub Pages
permissions:
  contents: read # Potrebno za checkout
  pages: write # Potrebno za deploy na Pages
  id-token: write # Potrebno za deploy na Pages

jobs:
  # 1. Posao (job) za statičku analizu
  cppcheck:
    # Pokreće se na Ubuntu runneru
    runs-on: ubuntu-latest
    
    # Koraci (steps) koji se izvršavaju
    steps:
      # 1.1. Preuzimanje koda repozitorija
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1.2. Instalacija cppcheck alata
      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck python3 python3-pip

      # 1.3. Instalacija cppcheck-htmlreport alata
      - name: Install cppcheck-htmlreport
        run: pip3 install cppcheck-htmlreport

      # 1.4. Pokretanje cppcheck analize i generiranje XML izvještaja
      - name: Run cppcheck analysis (XML Output)
        run: |
          # Provjeri postoji li Lab1 direktorij
          if [ -d "Lab1" ]; then
            echo "Running cppcheck..."
            INO_FILES=$(find Lab1 -maxdepth 1 -name '*.ino')             
            if [ -z "$INO_FILES" ]; then
              echo "No .ino files found in Lab1 directory!"
              exit 1
            fi
            echo "Analyzing files: $INO_FILES"
            
            # Pokreni cppcheck s XML izlazom:
            # --xml --xml-version=2: Generiraj XML izvještaj (verzija 2)
            # 2> cppcheck-report.xml: Preusmjeri XML izlaz (koji ide na stderr) u datoteku
            # Ostali flagovi kao i prije (suppress, error-exitcode, itd.)
            cppcheck --enable=all --inconclusive --std=c++17  --checkers-report=cppcheck-report.xml  --xml --xml-version=2 $INO_FILES 2> cppcheck-report1.xml
            # Provjeri izlazni kod cppchecka ručno jer preusmjeravanje može sakriti grešku od shella
            CPPCHECK_EXIT_CODE=$? 
            echo "Cppcheck exit code: $CPPCHECK_EXIT_CODE"
            # Ako želite da build padne i ako nema XML reporta (npr. cppcheck nije našao file), dodajte provjeru ovdje
            if [ $CPPCHECK_EXIT_CODE -ne 0 ]; then
              echo "Cppcheck failed with exit code $CPPCHECK_EXIT_CODE"
              # Opcionalno ispiši XML ako postoji, radi debuga
              if [ -f cppcheck-report.xml ]; then
                 echo "--- Cppcheck XML Report (contains errors) ---"
                 cat cppcheck-report.xml
                 echo "--- End Report ---"
              fi
              exit $CPPCHECK_EXIT_CODE # Propagira grešku da workflow padne
            fi

          else
            echo "Directory Lab1 does not exist!"
            exit 1 # Završi s greškom ako direktorij ne postoji
          fi

      # 1.5. Generiranje HTML izvještaja iz XML-a
      - name: Generate HTML report
        if: success() || failure() # Pokreni čak i ako je cppcheck našao greške, da imamo report
        run: |
          if [ -f cppcheck-report.xml ]; then
            echo "Generating HTML report..."
            # --file: Ulazna XML datoteka
            # --report-dir: Izlazni direktorij za HTML report
            # --source-dir: Korijenski direktorij izvornog koda (za linkove u reportu)
            cppcheck-htmlreport --file=cppcheck-report.xml --report-dir=cppcheck-html-report --source-dir=.
          else
            echo "cppcheck-report.xml not found, skipping HTML generation."
            # Opcionalno: Kreiraj prazan direktorij da upload/deploy ne padnu skroz
            mkdir -p cppcheck-html-report 
            echo "No cppcheck report generated." > cppcheck-html-report/index.html
          fi

      # 1.6. Setup Pages (Konfiguracija za GitHub Pages)
      - name: Setup Pages
        # Pokreni samo ako je push na main granu, jer samo tada radimo deploy
        if: github.ref == 'refs/heads/main' 
        uses: actions/configure-pages@v5

      # 1.7. Upload HTML izvještaja kao Pages artefakta
      - name: Upload artifact for Pages
        # Pokreni samo ako je push na main granu
        if: github.ref == 'refs/heads/main' 
        uses: actions/upload-pages-artifact@v3
        with:
          # Uploadaj sadržaj direktorija s HTML izvještajem
          path: './cppcheck-html-report'

  # 2. Posao (job) za Deploy na GitHub Pages
  deploy:
    # Pokreni ovaj posao samo ako je prethodni 'cppcheck' posao uspješno završen
    # I samo ako se radi o pushu na main granu
    needs: cppcheck
    if: github.ref == 'refs/heads/main'

    # Postavke okoline za GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    # Dozvole potrebne za deploy
    permissions:
      pages: write
      id-token: write

    # Pokreće se na Ubuntu runneru
    runs-on: ubuntu-latest
    
    steps:
      # Korak za deploy Pages artefakta
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # Koristi službenu akciju za deploy
